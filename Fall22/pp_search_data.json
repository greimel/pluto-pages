[{"url":"installation/","title":"Software installation","tags":["welcome"],"text":"First-time setup: Install Julia & Pluto Video version: Text and pictures version: Step 1: Install Julia  1.8.2 Go to  https://julialang.org/downloads  and download the current stable release, Julia  1.8.2 , using the correct version for your operating system (Linux x86, Mac, Windows, etc). Step 2: Run Julia After installing,  make sure that you can run Julia . On some systems, this means searching for the “Julia  1.8.2 ” program installed on your computer; in others, it means running the command  julia  in a terminal. Make sure that you can execute  1 + 1 : Make sure that you are able to launch Julia and calculate  1+1  before proceeding! Step 3: Install  Pluto Next we will install the  Pluto , the notebook environment that we will be using during the course. Pluto is a Julia  programming environment  designed for interactivity and quick experiments. Open the  Julia REPL . This is the command-line interface to Julia, similar to the previous screenshot. Here you type  Julia commands , and when you press ENTER, it runs, and you see the result. To install Pluto, we want to run a  package manager command . To switch from  Julia  mode to  Pkg  mode, type  ]  (closing square bracket) at the  julia>  prompt: \njulia> ]\n\n(@v 1.8 ) pkg>\n The line turns blue and the prompt changes to  pkg> , telling you that you are now in  package manager mode . This mode allows you to do operations on  packages  (also called libraries). To install Pluto, run the following (case sensitive) command to  add  (install) the package to your system by downloading it from the internet.\nYou should only need to do this  once  for each installation of Julia: \n(@v 1.8 ) pkg> add Pluto\n This might take a couple of minutes, so you can go get yourself a cup of tea! You can now close the terminal. Step 4: Use a modern browser: Mozilla Firefox or Google Chrome We need a modern browser to view Pluto notebooks with. Firefox and Chrome work best. Second time:  Running Pluto & opening a notebook Repeat the following steps whenever you want to work on a project or homework assignment. Step 1: Start Pluto Start the Julia REPL, like you did during the setup. In the REPL, type: julia> using Pluto\n\njulia> Pluto.run()\n The terminal tells us to go to  http://localhost:1234/  (or a similar URL). Let’s open Firefox or Chrome and type that into the address bar. If you’re curious about what a  Pluto notebook  looks like, have a look at the  Featured Notebooks . These notebooks are useful for learning some basics of Julia programming. If you want to hear the story behind Pluto, have a look a the  JuliaCon presentation . If nothing happens in the browser the first time, close Julia and try again. And please let us know! Step 2a: Opening a notebook from the web This is the main menu - here you can create new notebooks, or open existing ones. Our homework assignments will always be based on a  template notebook , available in this GitHub repository. To start from a template notebook on the web, you can  paste the URL into the blue box  and press ENTER. For example, homework 0 is available  here . Go to this page, and on the top right, click on the button that says “Edit or run this notebook”. From these instructions, copy the notebook link, and paste it into the box. Press ENTER, and select OK in the confirmation box. The first thing we will want to do is to save the notebook somewhere on our own computer; see below. Step 2b: Opening an existing notebook file When you launch Pluto for the second time, your recent notebooks will appear in the main menu. You can click on them to continue where you left off. If you want to run a local notebook file that you have not opened before, then you need to enter its  full path  into the blue box in the main menu. More on finding full paths in step 3. Step 3: Saving a notebook We first need a folder to save our homework in. Open your file explorer and create one. Next, we need to know the  absolute path  of that folder. Here’s how you do that in  Windows ,  MacOS  and  Ubuntu . For example, you might have: C:\\Users\\fons\\Documents\\18S191_assignments\\  on Windows /Users/fons/Documents/18S191_assignments/  on MacOS /home/fons/Documents/18S191_assignments/  on Ubuntu Now that we know the absolute path, go back to your Pluto notebook, and at the top of the page, click on  “Save notebook…” . This is where you type the  new path+filename for your notebook : Click  Choose . Step 4: Sharing a notebook After working on your notebook (your code is autosaved when you run it), you will find your notebook file in the folder we created in step 3. This the file that you can share with others, or submit as your homework assignment to Canvas. \nconst run = f => f();\nrun(async () => {\nconst versions = await (await fetch(`https://julialang-s3.julialang.org/bin/versions.json`)).json()\nconst version_names = Object.keys(versions).sort().reverse()\nconst stable = version_names.find(v => versions[v].stable)\nconsole.log({stable})\nconst pkg_stable = /\\d+\\.\\d+/.exec(stable)[0]\ndocument.querySelectorAll(\"auto-julia-version\").forEach(el => {\n    console.log(el)\n    el.innerText = el.getAttribute(\"short\") == null ? stable : pkg_stable\n})\n});"},{"url":"sidebar data/","title":"sidebar data","tags":[],"text":"Dict \"main\" \"welcome\" collections \"welcome\" .pages, \"Module 1 Images, Transformations, Abstractions\" collections \"module1\" .pages, \"Module 2 Social Science & Data Science\" collections \"module2\" .pages, \"Module 3 Climate Science\" collections \"module3\" .pages, , "},{"url":"week0/basic_syntax/","title":"basic_syntax","tags":[],"text":" A Pluto.jl notebook v0.19.14 using Markdown using InteractiveUtils md\" Get started with Julia live Before being able to run this notebook successfully locally, you will need to set up Julia and Pluto. Spring21 installation \" md\" Variables We can define a variable using ` ` assignment . Then we can use its value in other expressions \" x 3 y 2x md\"By default Julia displays the output of the last operation. You can suppress the output by adding ` ` a semicolon at the end. \" md\"We can ask what type a variable has using `typeof` \" typeof y md\" Functions\" md\"We can use a short form, one line function definition for simple functions \" f x 2 x md\"Typing the function's name gives information about the function. To call it we must use parentheses \" f f 10 md\"For longer functions we use the following syntax with the `function` keyword and `end` \" function g x, y z x y return z^2 end g 1, 2 md\" For loops\" md\"Use `for` to loop through a pre determined set of values \" let s 0 for i in 1 10 s i Equivalent to s s i end s end md\"Here, `1 10` is a range representing the numbers from 1 to 10 \" typeof 1 10 md\"Above we used a `let` block to define a new local variable `s`. But blocks of code like this are usually better inside functions, so that they can be reused. For example, we could rewrite the above as follows \" function mysum n s 0 for i in 1 n s i end return s end mysum 100 md\" Conditionals `if`\" md\"We can evaluate whether a condition is true or not by simply writing the condition \" a 3 a 5 md\"We see that conditions have a Boolean `true` or `false` value. We can then use `if` to control what we do based on that value \" if a 5 \"small\" else \"big\" end md\"\"\"Note that the `if` also returns the last value that was evaluated, in this case the string `\"small\"` or `\"big\"`, Since Pluto is reactive, changing the definition of `a` above will automatically cause this to be reevaluated \"\"\" md\" Arrays\" md\" 1D arrays `Vector`s \" md\"We can make a `Vector` 1 dimensional, or 1D array using square brackets \" v 1, 2, 3 typeof v md\"The `1` in the type shows that this is a 1D array. We access elements also using square brackets \" v 2 v 2 10 md\"Note that Pluto does not automatically update cells when you modify elements of an array, but the value does change.\" md\"A nice way to create `Vector`s following a certain pattern is to use an array comprehension \" v2 i^2 for i in 1 10 md\" 2D arrays matrices \" md\"We can make small matrices 2D arrays with square brackets too \" M 1 2 3 4 typeof M md\"The `2` in the type confirms that this is a 2D array.\" md\"This won't work for larger matrices, though. For that we can use e.g.\" zeros 5, 5 md\"Note that `zeros` gives `Float64`s by default. We can also specify a type for the elements \" zeros Int, 4, 5 md\"We can then fill in the values we want by manipulating the elements, e.g. with a `for` loop.\" md\"A nice alternative syntax to create matrices following a certain pattern is an array comprehension with a double `for` loop \" i j for i in 1 5, j in 1 6 "},{"url":"week0/plots_tutorial/","title":"plots_tutorial","tags":[],"text":" A Pluto.jl notebook v0.19.14 using Markdown using InteractiveUtils md\"\"\" Resources Plots Docs Useful Tips https docs.juliaplots.org latest basics Useful Tips Plots Docs Examples https docs.juliaplots.org latest generated gr Plot Attributes http docs.juliaplots.org latest generated attributes plot Axis Attributes http docs.juliaplots.org latest generated attributes axis Axis Color Names http juliagraphics.github.io Colors.jl stable namedcolors \"\"\" md\"\"\" Loading Time Plots loading time sucks big time. This is a known problem. We know, we know, Julia is fast, just grab some coffee .... ☕☕☕☕☕☕☕☕☕ \"\"\" using Plots md\"\"\" Hello World \"\"\" plot rand 4 md\"\"\" Adding Stuff \"\"\" begin plot rand 4 scatter rand 4 end md\"\"\" Removing Stuff \"\"\" plot legend false, axis false, grid false, ticks false md\"\"\" Lines and points \"\"\" md\"\"\" Square Aspect Ratio \"\"\" begin v rand 4 plot v, ratio 1, legend false scatter v end md\"\"\" Matrices with color heatmap yflip true places the 2,1 entry where you want it, since you want to interchange xy with ij and i runs down and y runs up. \"\"\" A 1 1000 1 1 1 1 1 1 1 heatmap A, ratio 1, yflip true, legend false, axis false, grid false, ticks false heatmap rand 10,10 , clim 0,1 , ratio 1, legend false, axis false, ticks false begin MM 0 1 0 0 0 0 1 0 0 whiteblack RGBA 1,1,1,0 , RGB 0,0,0 heatmap c whiteblack, MM, aspect ratio 1, ticks .5 3.5, lims .5,3.5 , gridalpha 1, legend false, axis false, ylabel \"i\", xlabel \"j\" end begin p plot 1 4,guideposition top end begin p.attr foreground color RGB 1,0,0 p.attr foreground color end p begin q p.series list 1 .plotattributes q.explicit linecolor green end p md\"\"\" Colors \"\"\" Colors.color names mycolors colorant\"lightslateblue\",colorant\"limegreen\",colorant\"red\" begin AA i for i 50 300, j 1 100 heatmap AA, c mycolors, clim 1,300 end md\"\"\" Area under curves \"\"\" begin y rand 10 plot y, fillrange y. 0 . .5, label \"above below 1 2\", legend topleft end begin x LinRange 0,2,100 y1 exp. x y2 exp. 1.3 . x plot x, y1, fillrange y2, fillalpha 0.35, c 1, label \"Confidence band\", legend topleft end let x 3 .01 3 areaplot x, exp. x.^2 2 √ 2π ,alpha .25,legend false end begin M 1 2 3 7 8 9 4 5 6 0 .5 1.5 areaplot 1 3, M, seriescolor red green blue , fillalpha 0.2 0.3 0.4 end using SpecialFunctions let f x exp x^2 2 √ 2π δ .01 plot x √2 . erfinv. 2 . δ 2 δ 1 . 1 areaplot x, f. x , seriescolor red, blue , legend false plot f, x,c black end md\"\"\" Shapes \"\"\" begin rectangle w, h, x, y Shape x . 0,w,w,0 , y . 0,0,h,h circle r,x,y θ LinRange 0,2π,500 x. r. cos. θ , y. r. sin. θ end begin plot circle 5,0,0 , ratio 1, c red, fill true plot rectangle 5 √2,5 √2, 2.5 √2, 2.5 √2 ,c white,fill true,legend false end md\"\"\" Editing Plots manually \"\"\" pl plot 1 4, 1, 4, 9, 16 pl.attr pl.series list 1 pl size 300,200 pl md\"\"\" VegaLite \"\"\" using VegaLite, VegaDatasets vlplot point, rand 10 , rand 10 begin dataset \"zipcodes\" | vlplot circle, width 500, height 300, transform calculate \"substring datum.zip code, 0, 1 \", as digit , projection type albersUsa , longitude longitude, latitude latitude, size value 1 , color \"digit n\" end d DataFrame dataset \"zipcodes\" scatter d , longitude , d , latitude , m ., ms 1, xlim 150, 50 , ylim 20,55 using DataFrames begin struct RankOneMatrix T v AbstractVector T w AbstractVector T end end RankOneMatrix rand 3 , rand 3 methods RankOneMatrix begin xx .1 .1 1 plot xx.^2, xaxis log, yaxis log end begin plot exp. x , yaxis log end using PlutoUI TableOfContents "}]